import { useState } from 'react';
import * as React from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import TextField from '@material-ui/core/TextField';
import Step from '@material-ui/core/Step';

import Stepper from '@material-ui/core/Stepper';
import StepLabel from '@material-ui/core/StepLabel';
import { BasciConnect } from "components/ConnectWallet";
import Modal from '@material-ui/core/Modal';
import Backdrop from '@material-ui/core/Backdrop';
import Fade from '@material-ui/core/Fade';

type Step = 1 | 2 | 3 | 4 | 5;

const useStyles = makeStyles((theme: Theme) =>
createStyles({
form: {
display: 'flex',
flexDirection: 'column',
alignItems: 'center',
'& .MuiTextField-root': {
margin: theme.spacing(1),
width: '90%',
},
},
stepper: {
backgroundColor: 'transparent',
},
stepLabel: {
fontSize: '1.2rem',
},
button: {
marginTop: theme.spacing(2),
marginRight: theme.spacing(1),
},
instructions: {
marginTop: theme.spacing(1),
marginBottom: theme.spacing(1),
},
modal: {
display: 'flex',
alignItems: 'center',
justifyContent: 'center',
},
paper: {
backgroundColor: theme.palette.background.paper,
border: '2px solid #000',
boxShadow: theme.shadows[5],
padding: theme.spacing(2, 4, 3),
},
})
);

export const StepForm: NextPage = () => {
const classes = useStyles();
const [currentStep, setCurrentStep] = useState<Step>(1);
const [formValues, setFormValues] = useState({});
const [modalOpen, setModalOpen] = useState(false);

const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
event.persist();
setFormValues(values => ({
...values,
[event.target.name]: event.target.value,
}));
};

const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
event.preventDefault();
setModalOpen(true);
};

const closeModal = () => {
setModalOpen(false);
setCurrentStep(currentStep + 1);
}

const renderStep = () => {
switch (currentStep) {
    case 1:
    return (
      <>
              <div>
        <Head>
            <title>Create Wagmi Dapp</title>
<meta name="description" content="Generated by create next wagmi dapp" />
<link rel="icon" href="/favicon.ico" />
</Head>
<div>
<BasciConnect></BasciConnect>
</div>
</div>
<h2>Provide a Name Service</h2>
<TextField
label="Endpoint"
name="provider"
onChange={handleChange}
value={formValues.provider || ''}
/>
<TextField
label="Address"
name="address"
onChange={handleChange}
value={formValues.address || ''}
/>
</>
);
case 2:
return (
<> <div>
<Head>
<title>Create Wagmi Dapp</title>
<meta name="description" content="Generated by create next wagmi dapp" />
<link rel="icon" href="/favicon.ico" />
</Head>
<div>
<BasciConnect></BasciConnect>
</div>
</div>
<h2>Step 2</h2>
<TextField
label="Email"
type="email"
name="email"
onChange={handleChange}
value={formValues.email || ''}
/>
<TextField
label="Phone Number"
type="tel"
name="phone"
onChange={handleChange}
value={formValues.phone || ''}
/>
</>
);
case 3:
return (
<>
<h2>Step 3</h2>
<TextField
label="Address 1"
name="address1"
onChange={handleChange}
value={formValues.address1 || ''}
/>
<TextField
label="Address 2"
name="address2"
onChange={handleChange}
value={formValues.address2 || ''}
/>
<TextField
label="City"
name="city"
onChange={handleChange}
value={formValues.city || ''}
/>
<TextField
label="State"
name="state"
onChange={handleChange}
value={formValues.state || ''}
/>
<TextField
label="Zip Code"
name="zip"
onChange={handleChange}
value={formValues.zip || ''}
/>
</>
);
case 4:
return (
<>
<h2>Step 4</h2>
<TextField
label="Cardholder Name"
name="cardholderName"
onChange={handleChange}
value={formValues.cardholderName || ''}
/>
<TextField
label="Card Number"
name="cardNumber"
onChange={handleChange}
value={formValues.cardNumber || ''}
/>
<TextField
label="Expiration Date"
name="expirationDate"
onChange={handleChange}
value={formValues.expirationDate || ''}
/>
</>
);
case 4:
    return (
    <>
    <h2>Step 4</h2>
    <TextField
    label="Cardholder Name"
    name="cardholderName"
    onChange={handleChange}
    value={formValues.cardholderName || ''}
    />
    <TextField
    label="Card Number"
    name="cardNumber"
    onChange={handleChange}
    value={formValues.cardNumber || ''}
    />
    <TextField
    label="Expiration Date"
    name="expirationDate"
    onChange={handleChange}
    value={formValues.expirationDate || ''}
    />
    <TextField
    label="CVV"
    name="cvv"
    onChange={handleChange}
    value={formValues.cvv || ''}
    />
    </>
    );
    case 5:
    return (
    <>
    <h2>Step 5</h2>
    <Typography>
    All done! Review your information:
    <br />
    <br />
    Provider: {formValues.provider}
    <br />
    Address: {formValues.address}
    <br />
    Email: {formValues.email}
    <br />
    Phone: {formValues.phone}
    <br />
    Address 1: {formValues.address1}
    <br />
    Address 2: {formValues.address2}
    <br />
    City: {formValues.city}
    <br />
    State: {formValues.state}
    <br />
    Zip: {formValues.zip}
    <br />
    Cardholder Name: {formValues.cardholderName}
    <br />
    Card Number: {formValues.cardNumber}
    <br />
    Expiration Date: {formValues.expirationDate}
    <br />
    CVV: {formValues.cvv}
    </Typography>
    </>
    );
    default:
    return <h1>Error</h1>;
    }
    };
    
    return (
        <>
          <Stepper activeStep={currentStep - 1} className={classes.stepper}>
            <StepLabel className={classes.stepLabel}>Step 1</StepLabel>
            <StepLabel className={classes.stepLabel}>Step 2</StepLabel>
            <StepLabel className={classes.stepLabel}>Step 3</StepLabel>
            <StepLabel className={classes.stepLabel}>Step 4</StepLabel>
            <StepLabel className={classes.stepLabel}>Step 5</StepLabel>
          </Stepper>
          <form onSubmit={handleSubmit} className={classes.form}>
            {renderStep()}
            {currentStep < 5 && (
              <Button type="submit" variant="contained" color="primary" className={classes.button}>
                Next
              </Button>
            )}
            {currentStep === 5 && (
              <Button type="submit" variant="contained" color="primary" className={classes.button}>
                Submit
              </Button>
            )}
          </form>
          <Modal
            aria-labelledby="transition-modal-title"
            aria-describedby="transition-modal-description"
            className={classes.modal}
            open={modalOpen}
            onClose={closeModal}
            closeAfterTransition
            BackdropComponent={Backdrop}
            BackdropProps={{
              timeout: 500,
            }}
          >
            <Fade in={modalOpen}>
              {renderStep()}
            </Fade>
          </Modal>
          <Button onClick={closeModal}>Close</Button>
        </>
      );
    }

      export default StepForm;